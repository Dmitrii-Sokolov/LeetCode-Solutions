namespace Problem0773
{

  /// <summary>
  /// 773. Sliding Puzzle
  /// https://leetcode.com/problems/sliding-puzzle
  /// 
  /// Difficulty Hard
  /// Acceptance 67.7%
  /// 
  /// Array
  /// Breadth-First Search
  /// Matrix
  /// </summary>
  public class Solution
  {
    private const int BitsCount = 3;
    private const int RowLength = 3;
    private const int Mask = 0b111;
    private const int Final = 0b_000_101_100_011_010_001;

    private readonly static Dictionary<int, int> AllResults = new()
    {
      { 0b_000_101_100_011_010_001, 00}, { 0b_011_101_100_000_010_001, 01}, { 0b_101_000_100_011_010_001, 01}, { 0b_011_101_100_010_000_001, 02},
      { 0b_101_010_100_011_000_001, 02}, { 0b_101_100_000_011_010_001, 02}, { 0b_011_000_100_010_101_001, 03}, { 0b_011_101_100_010_001_000, 03},
      { 0b_101_010_100_011_001_000, 03}, { 0b_101_010_100_000_011_001, 03}, { 0b_101_100_001_011_010_000, 03}, { 0b_011_100_000_010_101_001, 04},
      { 0b_000_011_100_010_101_001, 04}, { 0b_011_101_000_010_001_100, 04}, { 0b_101_010_000_011_001_100, 04}, { 0b_000_010_100_101_011_001, 04},
      { 0b_101_100_001_011_000_010, 04}, { 0b_011_100_001_010_101_000, 05}, { 0b_010_011_100_000_101_001, 05}, { 0b_011_000_101_010_001_100, 05},
      { 0b_101_000_010_011_001_100, 05}, { 0b_010_000_100_101_011_001, 05}, { 0b_101_000_001_011_100_010, 05}, { 0b_101_100_001_000_011_010, 05},
      { 0b_011_100_001_010_000_101, 06}, { 0b_010_011_100_101_000_001, 06}, { 0b_011_001_101_010_000_100, 06}, { 0b_000_011_101_010_001_100, 06},
      { 0b_101_001_010_011_000_100, 06}, { 0b_000_101_010_011_001_100, 06}, { 0b_010_100_000_101_011_001, 06}, { 0b_101_001_000_011_100_010, 06},
      { 0b_000_101_001_011_100_010, 06}, { 0b_000_100_001_101_011_010, 06}, { 0b_011_000_001_010_100_101, 07}, { 0b_011_100_001_000_010_101, 07},
      { 0b_010_011_100_101_001_000, 07}, { 0b_011_001_101_010_100_000, 07}, { 0b_011_001_101_000_010_100, 07}, { 0b_010_011_101_000_001_100, 07},
      { 0b_101_001_010_011_100_000, 07}, { 0b_101_001_010_000_011_100, 07}, { 0b_011_101_010_000_001_100, 07}, { 0b_010_100_001_101_011_000, 07},
      { 0b_011_101_001_000_100_010, 07}, { 0b_100_000_001_101_011_010, 07}, { 0b_011_001_000_010_100_101, 08}, { 0b_000_011_001_010_100_101, 08},
      { 0b_000_100_001_011_010_101, 08}, { 0b_010_011_000_101_001_100, 08}, { 0b_000_001_101_011_010_100, 08}, { 0b_010_011_101_001_000_100, 08},
      { 0b_000_001_010_101_011_100, 08}, { 0b_011_101_010_001_000_100, 08}, { 0b_010_100_001_101_000_011, 08}, { 0b_011_101_001_100_000_010, 08},
      { 0b_100_011_001_101_000_010, 08}, { 0b_100_001_000_101_011_010, 08}, { 0b_010_011_001_000_100_101, 09}, { 0b_100_000_001_011_010_101, 09},
      { 0b_010_000_011_101_001_100, 09}, { 0b_001_000_101_011_010_100, 09}, { 0b_010_000_101_001_011_100, 09}, { 0b_010_011_101_001_100_000, 09},
      { 0b_001_000_010_101_011_100, 09}, { 0b_011_000_010_001_101_100, 09}, { 0b_011_101_010_001_100_000, 09}, { 0b_010_000_001_101_100_011, 09},
      { 0b_010_100_001_000_101_011, 09}, { 0b_011_000_001_100_101_010, 09}, { 0b_011_101_001_100_010_000, 09}, { 0b_100_011_001_101_010_000, 09},
      { 0b_100_011_001_000_101_010, 09}, { 0b_100_001_010_101_011_000, 09}, { 0b_010_011_001_100_000_101, 10}, { 0b_100_010_001_011_000_101, 10},
      { 0b_100_001_000_011_010_101, 10}, { 0b_010_001_011_101_000_100, 10}, { 0b_000_010_011_101_001_100, 10}, { 0b_001_010_101_011_000_100, 10},
      { 0b_001_101_000_011_010_100, 10}, { 0b_010_101_000_001_011_100, 10}, { 0b_000_010_101_001_011_100, 10}, { 0b_010_011_000_001_100_101, 10},
      { 0b_001_011_010_101_000_100, 10}, { 0b_001_010_000_101_011_100, 10}, { 0b_011_010_000_001_101_100, 10}, { 0b_000_011_010_001_101_100, 10},
      { 0b_011_101_000_001_100_010, 10}, { 0b_010_001_000_101_100_011, 10}, { 0b_000_010_001_101_100_011, 10}, { 0b_000_100_001_010_101_011, 10},
      { 0b_011_001_000_100_101_010, 10}, { 0b_000_011_001_100_101_010, 10}, { 0b_011_101_000_100_010_001, 10}, { 0b_100_011_000_101_010_001, 10},
      { 0b_100_001_010_101_000_011, 10}, { 0b_010_000_001_100_011_101, 11}, { 0b_010_011_001_100_101_000, 11}, { 0b_100_010_001_011_101_000, 11},
      { 0b_100_010_001_000_011_101, 11}, { 0b_100_001_101_011_010_000, 11}, { 0b_010_001_011_101_100_000, 11}, { 0b_010_001_011_000_101_100, 11},
      { 0b_101_010_011_000_001_100, 11}, { 0b_001_010_101_011_100_000, 11}, { 0b_001_010_101_000_011_100, 11}, { 0b_001_101_100_011_010_000, 11},
      { 0b_010_101_100_001_011_000, 11}, { 0b_010_000_011_001_100_101, 11}, { 0b_001_011_010_101_100_000, 11}, { 0b_001_011_010_000_101_100, 11},
      { 0b_001_010_100_101_011_000, 11}, { 0b_011_010_100_001_101_000, 11}, { 0b_011_000_101_001_100_010, 11}, { 0b_101_010_001_000_100_011, 11},
      { 0b_100_000_001_010_101_011, 11}, { 0b_011_001_010_100_101_000, 11}, { 0b_011_000_101_100_010_001, 11}, { 0b_100_000_011_101_010_001, 11},
      { 0b_100_000_010_101_001_011, 11}, { 0b_100_001_010_000_101_011, 11}, { 0b_010_001_000_100_011_101, 12}, { 0b_000_010_001_100_011_101, 12},
      { 0b_010_011_000_100_101_001, 12}, { 0b_100_010_000_011_101_001, 12}, { 0b_100_001_101_011_000_010, 12}, { 0b_000_001_011_010_101_100, 12},
      { 0b_101_010_011_001_000_100, 12}, { 0b_001_010_000_011_100_101, 12}, { 0b_001_101_100_011_000_010, 12}, { 0b_010_101_100_001_000_011, 12},
      { 0b_010_100_011_001_000_101, 12}, { 0b_000_010_011_001_100_101, 12}, { 0b_001_011_000_101_100_010, 12}, { 0b_001_010_100_101_000_011, 12},
      { 0b_011_010_100_001_000_101, 12}, { 0b_011_100_101_001_000_010, 12}, { 0b_000_011_101_001_100_010, 12}, { 0b_101_010_001_100_000_011, 12},
      { 0b_100_101_001_010_000_011, 12}, { 0b_100_001_000_010_101_011, 12}, { 0b_011_001_010_100_000_101, 12}, { 0b_011_010_101_100_000_001, 12},
      { 0b_000_011_101_100_010_001, 12}, { 0b_100_010_011_101_000_001, 12}, { 0b_000_100_011_101_010_001, 12}, { 0b_100_010_000_101_001_011, 12},
      { 0b_000_100_010_101_001_011, 12}, { 0b_000_001_010_100_101_011, 12}, { 0b_010_001_101_100_011_000, 13}, { 0b_010_000_011_100_101_001, 13},
      { 0b_100_000_010_011_101_001, 13}, { 0b_100_000_101_011_001_010, 13}, { 0b_100_001_101_000_011_010, 13}, { 0b_001_000_011_010_101_100, 13},
      { 0b_101_000_011_001_010_100, 13}, { 0b_101_010_011_001_100_000, 13}, { 0b_001_000_010_011_100_101, 13}, { 0b_001_000_100_011_101_010, 13},
      { 0b_001_101_100_000_011_010, 13}, { 0b_010_000_100_001_101_011, 13}, { 0b_010_101_100_000_001_011, 13}, { 0b_010_100_011_001_101_000, 13},
      { 0b_010_100_011_000_001_101, 13}, { 0b_001_010_011_000_100_101, 13}, { 0b_001_000_011_101_100_010, 13}, { 0b_001_000_100_101_010_011, 13},
      { 0b_001_010_100_000_101_011, 13}, { 0b_011_000_100_001_010_101, 13}, { 0b_011_010_100_000_001_101, 13}, { 0b_011_100_101_001_010_000, 13},
      { 0b_011_100_101_000_001_010, 13}, { 0b_001_011_101_000_100_010, 13}, { 0b_101_000_001_100_010_011, 13}, { 0b_101_010_001_100_011_000, 13},
      { 0b_100_101_001_010_011_000, 13}, { 0b_100_101_001_000_010_011, 13}, { 0b_100_001_011_010_101_000, 13}, { 0b_011_000_010_100_001_101, 13},
      { 0b_011_001_010_000_100_101, 13}, { 0b_011_010_101_100_001_000, 13}, { 0b_011_010_101_000_100_001, 13}, { 0b_100_011_101_000_010_001, 13},
      { 0b_100_010_011_101_001_000, 13}, { 0b_100_010_011_000_101_001, 13}, { 0b_101_100_011_000_010_001, 13}, { 0b_101_100_010_000_001_011, 13},
      { 0b_001_000_010_100_101_011, 13}, { 0b_010_001_101_100_000_011, 14}, { 0b_010_101_011_100_000_001, 14}, { 0b_000_010_011_100_101_001, 14},
      { 0b_100_101_010_011_000_001, 14}, { 0b_000_100_010_011_101_001, 14}, { 0b_100_101_000_011_001_010, 14}, { 0b_000_100_101_011_001_010, 14},
      { 0b_000_001_101_100_011_010, 14}, { 0b_001_101_011_010_000_100, 14}, { 0b_001_011_000_010_101_100, 14}, { 0b_101_011_000_001_010_100, 14},
      { 0b_000_101_011_001_010_100, 14}, { 0b_101_010_000_001_100_011, 14}, { 0b_001_100_010_011_000_101, 14}, { 0b_000_001_010_011_100_101, 14},
      { 0b_001_100_000_011_101_010, 14}, { 0b_000_001_100_011_101_010, 14}, { 0b_000_101_100_001_011_010, 14}, { 0b_010_100_000_001_101_011, 14},
      { 0b_000_010_100_001_101_011, 14}, { 0b_000_101_100_010_001_011, 14}, { 0b_000_100_011_010_001_101, 14}, { 0b_001_010_011_100_000_101, 14},
      { 0b_001_100_011_101_000_010, 14}, { 0b_000_001_011_101_100_010, 14}, { 0b_001_100_000_101_010_011, 14}, { 0b_000_001_100_101_010_011, 14},
      { 0b_011_100_000_001_010_101, 14}, { 0b_000_011_100_001_010_101, 14}, { 0b_000_010_100_011_001_101, 14}, { 0b_001_011_101_100_000_010, 14},
      { 0b_101_001_000_100_010_011, 14}, { 0b_000_101_001_100_010_011, 14}, { 0b_101_010_000_100_011_001, 14}, { 0b_100_101_000_010_011_001, 14},
      { 0b_100_001_011_010_000_101, 14}, { 0b_011_010_000_100_001_101, 14}, { 0b_000_011_010_100_001_101, 14}, { 0b_000_010_101_011_100_001, 14},
      { 0b_100_011_101_010_000_001, 14}, { 0b_101_100_011_010_000_001, 14}, { 0b_101_100_010_001_000_011, 14}, { 0b_001_101_010_100_000_011, 14},
      { 0b_001_010_000_100_101_011, 14}, { 0b_010_000_101_100_001_011, 15}, { 0b_010_001_101_000_100_011, 15}, { 0b_010_101_011_100_001_000, 15},
      { 0b_010_101_011_000_100_001, 15}, { 0b_100_101_010_011_001_000, 15}, { 0b_100_101_010_000_011_001, 15}, { 0b_011_100_010_000_101_001, 15},
      { 0b_001_000_101_100_011_010, 15}, { 0b_001_101_011_010_100_000, 15}, { 0b_001_101_011_000_010_100, 15}, { 0b_001_011_100_010_101_000, 15},
      { 0b_101_011_100_001_010_000, 15}, { 0b_101_000_010_001_100_011, 15}, { 0b_001_100_010_011_101_000, 15}, { 0b_001_100_010_000_011_101, 15},
      { 0b_011_001_100_000_101_010, 15}, { 0b_101_000_100_001_011_010, 15}, { 0b_101_000_100_010_001_011, 15}, { 0b_100_000_011_010_001_101, 15},
      { 0b_001_000_011_100_010_101, 15}, { 0b_001_010_011_100_101_000, 15}, { 0b_001_100_011_101_010_000, 15}, { 0b_001_100_011_000_101_010, 15},
      { 0b_101_001_011_000_100_010, 15}, { 0b_101_001_100_000_010_011, 15}, { 0b_001_011_100_000_010_101, 15}, { 0b_010_000_100_011_001_101, 15},
      { 0b_001_011_101_100_010_000, 15}, { 0b_101_001_011_100_010_000, 15}, { 0b_101_000_010_100_011_001, 15}, { 0b_100_000_101_010_011_001, 15},
      { 0b_100_001_011_000_010_101, 15}, { 0b_100_011_010_000_001_101, 15}, { 0b_010_000_101_011_100_001, 15}, { 0b_100_011_101_010_001_000, 15},
      { 0b_101_000_011_010_100_001, 15}, { 0b_101_100_011_010_001_000, 15}, { 0b_101_100_010_001_011_000, 15}, { 0b_001_101_010_100_011_000, 15},
      { 0b_001_101_010_000_100_011, 15}, { 0b_010_101_000_100_001_011, 16}, { 0b_000_010_101_100_001_011, 16}, { 0b_000_001_101_010_100_011, 16},
      { 0b_000_101_011_010_100_001, 16}, { 0b_000_101_010_100_011_001, 16}, { 0b_011_100_010_101_000_001, 16}, { 0b_001_101_000_100_011_010, 16},
      { 0b_001_101_000_010_100_011, 16}, { 0b_001_011_100_010_000_101, 16}, { 0b_101_011_100_001_000_010, 16}, { 0b_000_101_010_001_100_011, 16},
      { 0b_000_100_010_001_011_101, 16}, { 0b_011_001_100_101_000_010, 16}, { 0b_101_100_000_001_011_010, 16}, { 0b_101_001_100_010_000_011, 16},
      { 0b_101_100_000_010_001_011, 16}, { 0b_100_011_000_010_001_101, 16}, { 0b_001_011_000_100_010_101, 16}, { 0b_000_001_011_100_010_101, 16},
      { 0b_000_100_011_001_101_010, 16}, { 0b_101_001_011_100_000_010, 16}, { 0b_010_001_100_011_000_101, 16}, { 0b_010_100_000_011_001_101, 16},
      { 0b_101_011_010_100_000_001, 16}, { 0b_000_100_101_010_011_001, 16}, { 0b_100_011_010_001_000_101, 16}, { 0b_010_100_101_011_000_001, 16},
      { 0b_010_101_000_011_100_001, 16}, { 0b_101_011_000_010_100_001, 16}, { 0b_100_010_101_000_001_011, 17}, { 0b_001_000_101_010_100_011, 17},
      { 0b_011_000_010_101_100_001, 17}, { 0b_011_100_010_101_001_000, 17}, { 0b_001_000_100_010_011_101, 17}, { 0b_101_011_100_000_001_010, 17},
      { 0b_100_000_010_001_011_101, 17}, { 0b_011_000_100_101_001_010, 17}, { 0b_011_001_100_101_010_000, 17}, { 0b_101_001_100_010_011_000, 17},
      { 0b_100_000_011_001_101_010, 17}, { 0b_101_000_011_100_001_010, 17}, { 0b_010_001_100_011_101_000, 17}, { 0b_010_001_100_000_011_101, 17},
      { 0b_010_100_101_011_001_000, 17}, { 0b_101_011_010_100_001_000, 17}, { 0b_101_011_010_000_100_001, 17}, { 0b_010_100_101_000_011_001, 17},
      { 0b_100_011_010_001_101_000, 17}, { 0b_010_101_001_011_100_000, 17}, { 0b_101_011_001_010_100_000, 17}, { 0b_100_010_101_001_000_011, 18},
      { 0b_001_100_101_010_000_011, 18}, { 0b_011_010_000_101_100_001, 18}, { 0b_000_011_010_101_100_001, 18}, { 0b_011_100_000_101_001_010, 18},
      { 0b_001_100_000_010_011_101, 18}, { 0b_000_001_100_010_011_101, 18}, { 0b_000_011_100_101_001_010, 18}, { 0b_100_010_000_001_011_101, 18},
      { 0b_011_001_000_101_010_100, 18}, { 0b_101_001_000_010_011_100, 18}, { 0b_100_101_011_001_000_010, 18}, { 0b_100_011_000_001_101_010, 18},
      { 0b_101_011_000_100_001_010, 18}, { 0b_000_101_011_100_001_010, 18}, { 0b_010_001_000_011_101_100, 18}, { 0b_010_101_001_011_000_100, 18},
      { 0b_101_011_001_010_000_100, 18}, { 0b_100_000_101_001_010_011, 19}, { 0b_100_010_101_001_011_000, 19}, { 0b_001_100_101_010_011_000, 19},
      { 0b_001_100_101_000_010_011, 19}, { 0b_011_010_001_101_100_000, 19}, { 0b_011_000_001_101_010_100, 19}, { 0b_101_000_001_010_011_100, 19},
      { 0b_100_101_011_001_010_000, 19}, { 0b_100_101_011_000_001_010, 19}, { 0b_010_000_001_011_101_100, 19}, { 0b_010_101_001_000_011_100, 19},
      { 0b_101_011_001_000_010_100, 19}, { 0b_100_101_000_001_010_011, 20}, { 0b_000_100_101_001_010_011, 20}, { 0b_011_010_001_101_000_100, 20},
      { 0b_000_011_001_101_010_100, 20}, { 0b_000_101_001_010_011_100, 20}, { 0b_000_010_001_011_101_100, 20}, { 0b_011_010_001_000_101_100, 21},
    };

    public int SlidingPuzzle(int[][] board)
    {
      return AllResults.GetValueOrDefault(Parse(board), -1);
      //return FindResultWithBFS(board);
    }

    public static void WriteAllResults(int resultsPerLine = 4)
    {
      var counter = 0;
      foreach (var pair in FindAllStatesWithBFS())
      {
        var binaryState = ConvertStateToBinaryString(pair.Key);
        var line = $"{{{binaryState}, {pair.Value:00}}}, ";
        Console.Write(line);
        counter++;
        if (counter % resultsPerLine == 0)
          Console.WriteLine();
      }
    }

    private static string ConvertStateToBinaryString(int state)
    {
      var binary = Convert.ToString(state, 2);

      var line = new System.Text.StringBuilder();
      line.Append("0b");

      for (var position = 0; position < 6; position++)
      {
        line.Append('_');
        for (var i = 0; i < BitsCount; i++)
        {
          var inversedShift = 18 - (i + BitsCount * position);
          line.Append(inversedShift > binary.Length ? '0' : binary[^inversedShift]);
        }
      }

      return line.ToString();
    }

    private static Dictionary<int, int> FindAllStatesWithBFS()
    {
      var visited = new Dictionary<int, int>();

      var queue = new Queue<int>();
      queue.Enqueue(Final);

      var queueCount = queue.Count;
      var depth = 0;
      while (queue.Count > 0)
      {
        var neighborCount = 0;
        for (var i = 0; i < queueCount; i++)
        {
          var next = queue.Dequeue();
          if (visited.TryAdd(next, depth))
          {
            foreach (var neighbor in GetNeighbors(next))
            {
              queue.Enqueue(neighbor);
              neighborCount++;
            }
          }
        }

        queueCount = neighborCount;
        depth++;
      }

      return visited;
    }

    private static int FindResultWithBFS(int[][] board)
    {
      var visited = new HashSet<int>();

      var queue = new Queue<int>();
      queue.Enqueue(Parse(board));

      var queueCount = queue.Count;
      var result = 0;
      while (queue.Count > 0)
      {
        var neighborCount = 0;
        for (var i = 0; i < queueCount; i++)
        {
          var next = queue.Dequeue();
          if (next == Final)
            return result;

          if (visited.Add(next))
          {
            foreach (var neighbor in GetNeighbors(next))
            {
              queue.Enqueue(neighbor);
              neighborCount++;
            }
          }
        }

        queueCount = neighborCount;
        result++;
      }

      return -1;
    }

    private static IEnumerable<int> GetNeighbors(int state)
    {
      var (x, y) = GetEmptyPosition(state);

      yield return Swap(state, GetShift(x, y), GetShift(x, 1 - y));

      if (x > 0)
        yield return Swap(state, GetShift(x, y), GetShift(x - 1, y));

      if (x < 2)
        yield return Swap(state, GetShift(x, y), GetShift(x + 1, y));
    }

    private static (int X, int Y) GetEmptyPosition(int state)
    {
      for (var i = 0; i < 6; i++)
      {
        if ((state >> i * BitsCount & Mask) == 0)
          return GetXY(i);
      }

      throw new ArgumentException("No empty cell", nameof(state));
    }

    private static int Swap(int state, int shift0, int shift1)
    {
      var number0 = state >> shift0 & Mask;
      var number1 = state >> shift1 & Mask;

      state &= ~(Mask << shift0);
      state &= ~(Mask << shift1);

      state += number0 << shift1;
      state += number1 << shift0;

      return state;
    }

    private static int Parse(int[][] board)
    {
      var result = 0;
      for (var y = 0; y < 2; y++)
      {
        for (var x = 0; x < 3; x++)
          result += board[y][x] << GetShift(x, y);
      }

      return result;
    }

    private static (int X, int Y) GetXY(int position) => (position % RowLength, position / RowLength);
    private static int GetShift(int x, int y) => (x + 3 * y) * BitsCount;
  }
}
